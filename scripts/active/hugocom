#!/usr/bin/perl -T
use strict;
use warnings;
use File::Find;
use File::Basename;

sub indexDir {
    my ($filter) = @_;

    my $startDir = "/home/rocky/github.com/DnFreddie/Notes/content/posts/";

    # Untaint the directory path by 
    if ($startDir =~ m{^(/[\w\-/\.]+)$}) {
        $startDir = $1;  
    } else {
        die "Invalid directory path: $startDir";
    }

    unless ( -d $startDir ) {
        die "Directory $startDir does not exist or is not a directory.";
    }

    my @files;
    find(
        { 
            wanted => sub {
                return if -d $_;  # Skip directories
                # Untaint the file path before using it
                if ($File::Find::name =~ m{^(.*)$}) {
                    my $untainted_file = $1;
                    push @files, $untainted_file;
                }
            },
            no_chdir => 1  # Disable chdir to avoid taint issues
        },
        $startDir
    );

    my @mapArray;
    for my $file (@files) {
        my $file_name = File::Basename::basename($file);
        $file_name =~ s/\..*$//; 

        my ($relative_path) = $file =~ m!(posts/.*)!; 

        if ( !defined $relative_path ) {
            warn "Could not find 'posts/' in path: $file\n";
            next;
        }

        if ( $file_name =~ /$filter/i ) {  
            push @mapArray,
              {
                name => $file_name,
                path => $relative_path
              };
        }
    }

    return @mapArray;
}

sub replace {
    my ($strings) = @_;
    return
      sprintf( '[%s]({{< ref "%s">}})', $strings->{name}, $strings->{path} );
}

local $/;
my $inputText = <STDIN>;
chomp $inputText;

if ($inputText =~ /^(.*)$/) {
    $inputText = $1;  
} else {
    die "Input is invalid or tainted";
}

$inputText =~ s/\[(.*?)\]/ 
    my @matches = indexDir($1);  
    if (@matches) {
        replace($matches[0]);  
    } else {
        "[$1]";  
    } 
/eg;  

print $inputText;

